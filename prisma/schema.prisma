// src/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ExpenseType {
  GENERAL
  HOUSING
  CARD
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified DateTime? 
  image         String?
  provider      String?
  providerId    String?
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  profiles        Profile[]
  cards           Card[]
  categories      Category[]
  accounts        Account[]
  sessions        Session[]
  housingBills    HousingBill[]
  generalExpenses GeneralExpense[]
}

model Profile {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions    Transaction[]
  generalExpenses GeneralExpense[]
  housingBills    HousingBill[]
  user            User          @relation(fields: [userId], references: [id])
}

model Card {
  id          String   @id @default(cuid())
  name        String
  closingDate Int
  dueDay      Int
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions Transaction[]
  user         User       @relation(fields: [userId], references: [id])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions    Transaction[]
  generalExpenses GeneralExpense[]
  housingBills    HousingBill[]
  user            User          @relation(fields: [userId], references: [id])
}

model Transaction {
  id             String   @id @default(cuid())
  cardId         String
  profileId      String
  categoryId     String
  date           DateTime
  business       String?
  description    String?
  amount         Float
  monthReference Int @default(1)
  yearReference  Int @default(2025)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Parcelamento
  installmentNumber Int? // número da parcela (ex: 2)
  installmentTotal  Int? // total de parcelas (ex: 10)
  parentId          String? // id da compra "principal", se quiser vincular

  category Category @relation(fields: [categoryId], references: [id])
  profile  Profile  @relation(fields: [profileId], references: [id])
  card     Card     @relation(fields: [cardId], references: [id])

  parent   Transaction?  @relation("Installments", fields: [parentId], references: [id])
  children Transaction[] @relation("Installments")
}

model HousingBill {
  id         String   @id @default(cuid())
  name       String
  amount     Float
  dueDate    DateTime
  monthReference Int @default(1)
  yearReference  Int @default(2025)
  userId     String
  profileId  String?
  categoryId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  profile  Profile?  @relation(fields: [profileId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
}

model GeneralExpense {
  id             String   @id @default(cuid())
  description    String?
  business       String?             // Nome do estabelecimento
  amount         Float
  date           DateTime            // Data da compra
  dueDay         Int                 // Apenas o dia do vencimento (ex: 10)
  monthReference Int     @default(1) // Mês base da compra
  yearReference  Int     @default(2025)
  
   // Parcelamento
  installmentNumber Int? // número da parcela (ex: 2)
  installmentTotal  Int? // total de parcelas (ex: 10)
  parentId          String? // id da compra "principal", se quiser vincular

  categoryId     String?
  userId         String
  profileId      String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  profile  Profile?  @relation(fields: [profileId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])

  parent   GeneralExpense?  @relation("Installments", fields: [parentId], references: [id])
  children GeneralExpense[] @relation("Installments")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
